{
  "instrumentation": {
    "javax.servlet": {
      "description": "Javax Servlet instrumentation",
      "rules": [{
        "ruleName": "Javax Servlet Consumer Start",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.Servlet",
        "methodName": "service",
        "parameterTypes": [
          "javax.servlet.ServletRequest",
          "javax.servlet.ServletResponse"
        ],
        "location": "ENTRY",
        "binds": [{
          "name": "req",
          "type": "javax.servlet.http.HttpServletRequest",
          "expression": "$1"
        },{
          "name": "uri",
          "type": "java.net.URI",
          "expression": "java.net.URI.create(req.getRequestURI())"
        }],
        "condition": "!isActive() && activate(uri.getPath(),req.getMethod(),req.getHeader(\"HWKAPMID\"))",
        "actions": [{
          "type": "SetTraceId",
          "valueExpression": "req.getHeader(\"HWKAPMTRACEID\")"
        },{
          "type": "SetBusinessTransaction",
          "nameExpression": "req.getHeader(\"HWKAPMTXN\")"
        },{
          "type": "SetLevel",
          "levelExpression": "req.getHeader(\"HWKAPMLEVEL\")"
        },{
          "type": "InstrumentConsumer",
          "direction": "In",
          "endpointTypeExpression": "\"HTTP\"",
          "operationExpression": "req.getMethod()",
          "uriExpression": "uri.getPath()",
          "idExpression": "req.getHeader(\"HWKAPMID\")"
        },{
          "type": "ProcessHeaders",
          "direction": "In",
          "originalType": "javax.servlet.http.HttpServletRequest",
          "headersExpression": "req"
        },{
          "type": "SetProperty",
          "name": "apm_source",
          "valueExpression": "\"javax.servlet\""
        },{
          "type": "SetProperty",
          "name": "http.query",
          "valueExpression": "req.getQueryString()"
        },{
          "type": "SetProperty",
          "name": "http_method",
          "valueExpression": "req.getMethod()"
        },{
          "type": "SetProperty",
          "name": "http_host",
          "valueExpression": "req.getServerName()"
        },{
          "type": "SetProperty",
          "name": "http_port",
          "valueExpression": "req.getServerPort()"
        },{
          "type": "SetProperty",
          "name": "remoteAddr",
          "valueExpression": "req.getRemoteAddr()"
        },{
          "type": "SetProperty",
          "name": "remoteHost",
          "valueExpression": "req.getRemoteHost()"
        },{
          "type": "SetPrincipal",
          "nameExpression": "req.getRemoteUser()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer End Sync Fault",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.Servlet",
        "methodName": "service",
        "parameterTypes": [
          "javax.servlet.ServletRequest",
          "javax.servlet.ServletResponse"
        ],
        "location": "EXIT",
        "binds": [{
          "name": "resp",
          "type": "javax.servlet.http.HttpServletResponse",
          "expression": "$2"
        }],
        "condition": "isActive() && !$1.isAsyncStarted() && resp.getStatus() >= 400",
        "actions": [{
          "type": "SetProperty",
          "name": "fault",
          "valueExpression": "resp.getStatus()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer End Sync",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.Servlet",
        "methodName": "service",
        "parameterTypes": [
          "javax.servlet.ServletRequest",
          "javax.servlet.ServletResponse"
        ],
        "location": "EXIT",
        "binds": [{
          "name": "req",
          "type": "javax.servlet.http.HttpServletRequest",
          "expression": "$1"
        }],
        "condition": "isActive() && !$1.isAsyncStarted()",
        "actions": [{
          "type": "InstrumentConsumer",
          "direction": "Out",
          "endpointTypeExpression": "\"HTTP\"",
          "uriExpression": "java.net.URI.create(req.getRequestURI()).getPath()"
        },{
          "type": "AssertComplete"
        }]
      },{
        "ruleName": "Javax Servlet Consumer End Async Unlink",
        "ruleType": "JVM",
        "notes": [
          "This rule is required to ensure that when an async thread is initiated, ",
          "that this thread is unlinked from the business txn fragment, so that subsequent ",
          "activity on this thread is not incorrectly associated with the existing async ",
          "business txn"
        ],
        "interfaceName": "^javax.servlet.Servlet",
        "methodName": "service",
        "parameterTypes": [
          "javax.servlet.ServletRequest",
          "javax.servlet.ServletResponse"
        ],
        "location": "EXIT",
        "binds": [{
          "name": "req",
          "type": "javax.servlet.http.HttpServletRequest",
          "expression": "$1"
        }],
        "condition": "isActive() && $1.isAsyncStarted()",
        "actions": [{
          "type": "Unlink"
        }]
      },{
        "ruleName": "Javax Servlet Consumer GetInputStream Complete Async Link",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.ServletRequest",
        "methodName": "getInputStream",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "condition": "isCorrelated(\"javax.servlet-async-\"+$0.hashCode())",
        "actions": [{
          "type": "CompleteCorrelation",
          "idExpression": "\"javax.servlet-async-\"+$0.hashCode()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer GetMethod Complete Async Link",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.http.HttpServletRequest",
        "methodName": "getMethod",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "condition": "isCorrelated(\"javax.servlet-async-\"+$0.hashCode())",
        "actions": [{
          "type": "CompleteCorrelation",
          "idExpression": "\"javax.servlet-async-\"+$0.hashCode()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Init",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.ServletRequest",
        "methodName": "getInputStream",
        "parameterTypes": [
        ],
        "location": "EXIT",
        "condition": "isActive() && isInContentProcessed() && !isInBufferActive($!)",
        "actions": [{
          "type": "FreeFormAction",
          "action": "initInBuffer($!)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer GetReader Complete Link",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.ServletRequest",
        "methodName": "getReader",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "condition": "isCorrelated(\"javax.servlet-async-\"+$0.hashCode())",
        "actions": [{
          "type": "CompleteCorrelation",
          "idExpression": "\"javax.servlet-async-\"+$0.hashCode()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Init on Read 1",
        "ruleType": "JVM",
        "notes": [
          "Required to work around issue where getting caches the input stream so may not get retrieved to initiate buffer"
        ],
        "className": "^javax.servlet.ServletInputStream",
        "methodName": "read",
        "parameterTypes": [
          "byte[]"
        ],
        "location": "EXIT",
        "condition": "!isInBufferActive($0) && isActive() && isInContentProcessed() && $! > 0",
        "actions": [{
          "type": "FreeFormAction",
          "action": "initInBuffer($0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Init on Read 2",
        "ruleType": "JVM",
        "notes": [
          "Required to work around issue where getting caches the input stream so may not get retrieved to initiate buffer"
        ],
        "className": "^javax.servlet.ServletInputStream",
        "methodName": "read",
        "parameterTypes": [
          "byte[]",
          "int",
          "int"
        ],
        "location": "EXIT",
        "condition": "!isInBufferActive($0) && isActive() && isInContentProcessed() && $! > 0",
        "actions": [{
          "type": "FreeFormAction",
          "action": "initInBuffer($0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Append 1",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletInputStream",
        "methodName": "read",
        "parameterTypes": [
          "byte[]"
        ],
        "location": "EXIT",
        "actions": [{
          "type": "FreeFormAction",
          "action": "appendInBuffer($0, $1, 0, $!, $0.available()==0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Append 2",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletInputStream",
        "methodName": "read",
        "parameterTypes": [
          "byte[]",
          "int",
          "int"
        ],
        "location": "EXIT",
        "actions": [{
          "type": "FreeFormAction",
          "action": "appendInBuffer($0, $1, $2, $!, $0.available()==0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer InputStream Record",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletInputStream",
        "methodName": "close",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "actions": [{
          "type": "FreeFormAction",
          "action": "recordInBuffer($0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer OutputStream Init",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.ServletResponse",
        "methodName": "getOutputStream",
        "parameterTypes": [
        ],
        "condition": "isActive() && isOutContentProcessed() && !isOutBufferActive($!)",
        "location": "EXIT",
        "actions": [{
          "type": "FreeFormAction",
          "action": "initOutBuffer($!)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer OutputStream Append 1",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletOutputStream",
        "methodName": "write",
        "parameterTypes": [
          "byte[]"
        ],
        "location": "EXIT",
        "actions": [{
          "type": "FreeFormAction",
          "action": "appendOutBuffer($0, $1, $2, $!, false)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer OutputStream Append 2",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletOutputStream",
        "methodName": "write",
        "parameterTypes": [
          "byte[]",
          "int",
          "int"
        ],
        "location": "ENTRY",
        "actions": [{
          "type": "FreeFormAction",
          "action": "appendOutBuffer($0, $1, $2, $3, false)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer OutputStream Record",
        "ruleType": "JVM",
        "className": "^javax.servlet.ServletOutputStream",
        "methodName": "close",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "actions": [{
          "type": "FreeFormAction",
          "action": "recordOutBuffer($0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer BufferedWriter Init",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.ServletResponse",
        "methodName": "getWriter",
        "parameterTypes": [
        ],
        "condition": "isActive() && isOutContentProcessed() && !isOutBufferActive($!)",
        "location": "EXIT",
        "actions": [{
          "type": "FreeFormAction",
          "action": "initOutBuffer($!)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer Start Async",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.http.HttpServletRequest",
        "methodName": "startAsync",
        "parameterTypes": [
          "*"
        ],
        "location": "ENTRY",
        "condition": "isActive()",
        "actions": [{
          "type": "InitiateCorrelation",
          "idExpression": "\"javax.servlet-async-\"+hashCode($0)"
        }]
      },{
        "ruleName": "Javax Servlet Consumer Async Context Get Requests",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.AsyncContext",
        "methodName": "getRequest",
        "parameterTypes": [
        ],
        "location": "EXIT",
        "condition": "isCorrelated(\"javax.servlet-async-\"+$!.hashCode())",
        "actions": [{
          "type": "CompleteCorrelation",
          "idExpression": "\"javax.servlet-async-\"+$!.hashCode()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer Complete Async Context Fault",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.AsyncContext",
        "methodName": "complete",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "binds": [{
          "name": "resp",
          "type": "javax.servlet.http.HttpServletResponse",
          "expression": "$0.getResponse()"
        }],
        "condition": "isActive() && resp.getStatus() >= 400",
        "actions": [{
          "type": "SetProperty",
          "name": "fault",
          "valueExpression": "resp.getStatus()"
        }]
      },{
        "ruleName": "Javax Servlet Consumer Complete Async Context",
        "ruleType": "JVM",
        "interfaceName": "^javax.servlet.AsyncContext",
        "methodName": "complete",
        "parameterTypes": [
        ],
        "location": "ENTRY",
        "condition": "isActive()",
        "actions": [{
          "type": "InstrumentConsumer",
          "direction": "Out",
          "endpointTypeExpression": "\"HTTP\""
        },{
          "type": "AssertComplete"
        }]
      }]
    }
  }
}
